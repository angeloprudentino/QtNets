<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QScxmlCppDataModel</name>
        <filename>qscxmlcppdatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlCppDataModel</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>QScxmlCppDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QScxmlEvent &amp;</type>
            <name>scxmlEvent</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>scxmlEvent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>In</name>
            <anchorfile>qscxmlcppdatamodel.html</anchorfile>
            <anchor>In</anchor>
            <arglist>(const QString &amp;stateName) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlDataModel</name>
        <filename>qscxmldatamodel.html</filename>
        <base>QObject</base>
        <member kind="property" type="QScxmlStateMachine *">
            <name>stateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlDataModel</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>QScxmlDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setStateMachine</anchor>
            <arglist>(QScxmlStateMachine *stateMachine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlStateMachine *</type>
            <name>stateMachine</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateMachineChanged</name>
            <anchorfile>qscxmldatamodel.html</anchorfile>
            <anchor>stateMachine-prop</anchor>
            <arglist>(QScxmlStateMachine *stateMachine)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlEcmaScriptDataModel</name>
        <filename>qscxmlecmascriptdatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEcmaScriptDataModel</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>QScxmlEcmaScriptDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJSEngine *</type>
            <name>engine</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEngine</name>
            <anchorfile>qscxmlecmascriptdatamodel.html</anchorfile>
            <anchor>setEngine</anchor>
            <arglist>(QJSEngine *engine)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlError</name>
        <filename>qscxmlerror.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError-1</anchor>
            <arglist>(const QString &amp;fileName, int line, int column, const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>QScxmlError-2</anchor>
            <arglist>(const QScxmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlError &amp;</type>
            <name>operator=</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QScxmlError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlError</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>dtor.QScxmlError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>line</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>line</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qscxmlerror.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlEvent</name>
        <filename>qscxmlevent.html</filename>
        <base>QEvent</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>eventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>eventType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>sendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>sendId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>origin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>origin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>originType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>originType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>invokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>invokeId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>data</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>data-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>QScxmlEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>dtor.QScxmlEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlEvent &amp;</type>
            <name>operator=</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QScxmlEvent &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>QScxmlEvent-1</anchor>
            <arglist>(const QScxmlEvent &amp;other)</arglist>
        </member>
        <member kind="enum">
            <name>EventType</name>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlatformEvent">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalEvent">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExternalEvent">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>EventType</type>
            <name>eventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>eventType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setEventType</anchor>
            <arglist>(const EventType &amp;type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scxmlType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>scxmlType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>sendId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSendId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setSendId</anchor>
            <arglist>(const QString &amp;sendid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>origin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>origin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrigin</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setOrigin</anchor>
            <arglist>(const QString &amp;origin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>originType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>originType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOriginType</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setOriginType</anchor>
            <arglist>(const QString &amp;origintype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>invokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>invokeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInvokeId</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setInvokeId</anchor>
            <arglist>(const QString &amp;invokeid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>delay</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>delay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDelay</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setDelay</anchor>
            <arglist>(int delayInMiliSecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isErrorEvent</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>isErrorEvent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorMessage</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>errorMessage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorMessage</name>
            <anchorfile>qscxmlevent.html</anchorfile>
            <anchor>setErrorMessage</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlNullDataModel</name>
        <filename>qscxmlnulldatamodel.html</filename>
        <base>QScxmlDataModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlNullDataModel</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>QScxmlNullDataModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setup</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setup</anchor>
            <arglist>(const QVariantMap &amp;initialDataValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setScxmlEvent</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setScxmlEvent</anchor>
            <arglist>(const QScxmlEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>scxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>scxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasScxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>hasScxmlProperty</anchor>
            <arglist>(const QString &amp;name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setScxmlProperty</name>
            <anchorfile>qscxmlnulldatamodel.html</anchorfile>
            <anchor>setScxmlProperty</anchor>
            <arglist>(const QString &amp;name, const QVariant &amp;value, const QString &amp;context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlParser</name>
        <filename>qscxmlparser.html</filename>
        <class>QScxmlParser::Loader</class>
        <member kind="enum">
            <name>QtMode</name>
            <anchor>QtMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QtModeDisabled">
            <anchor>QtMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QtModeEnabled">
            <anchor>QtMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QtModeFromInputFile">
            <anchor>QtMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScxmlParser</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>QScxmlParser</anchor>
            <arglist>(QXmlStreamReader *reader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScxmlParser</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>dtor.QScxmlParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Loader *</type>
            <name>loader</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>loader</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoader</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>setLoader</anchor>
            <arglist>(Loader *newLoader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>parse</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>parse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlStateMachine *</type>
            <name>instantiateStateMachine</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>instantiateStateMachine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>instantiateDataModel</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>instantiateDataModel</anchor>
            <arglist>(QScxmlStateMachine *stateMachine) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QScxmlError&gt;</type>
            <name>errors</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addError</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>addError</anchor>
            <arglist>(const QString &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMode</type>
            <name>qtMode</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>qtMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQtMode</name>
            <anchorfile>qscxmlparser.html</anchorfile>
            <anchor>setQtMode</anchor>
            <arglist>(QtMode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlParser::Loader</name>
        <filename>qscxmlparser-loader.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Loader</name>
            <anchorfile>qscxmlparser-loader.html</anchorfile>
            <anchor>Loader</anchor>
            <arglist>(QScxmlParser *parser)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~Loader</name>
            <anchorfile>qscxmlparser-loader.html</anchorfile>
            <anchor>dtor.Loader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QByteArray</type>
            <name>load</name>
            <anchorfile>qscxmlparser-loader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;name, const QString &amp;baseDir, bool *ok) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QScxmlParser *</type>
            <name>parser</name>
            <anchorfile>qscxmlparser-loader.html</anchorfile>
            <anchor>parser</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlEventFilter</name>
        <filename>qscxmleventfilter.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QScxmlEventFilter</name>
            <anchorfile>qscxmleventfilter.html</anchorfile>
            <anchor>dtor.QScxmlEventFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>handle</name>
            <anchorfile>qscxmleventfilter.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>(QScxmlEvent *event, QScxmlStateMachine *stateMachine) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScxmlStateMachine</name>
        <filename>qscxmlstatemachine.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>running</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>running-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>initialized</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QScxmlDataModel *">
            <name>dataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariantMap">
            <name>initialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BindingMethod</name>
            <anchor>BindingMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EarlyBinding">
            <anchor>BindingMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LateBinding">
            <anchor>BindingMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScxmlStateMachine *</type>
            <name>fromFile</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>fromFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScxmlStateMachine *</type>
            <name>fromData</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(QIODevice *data, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QScxmlError&gt;</type>
            <name>parseErrors</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>parseErrors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>sessionId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionId</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setSessionId</anchor>
            <arglist>(const QString &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>generateSessionId</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>generateSessionId</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvoked</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isInvoked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInitialized</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setDataModel</anchor>
            <arglist>(QScxmlDataModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlDataModel *</type>
            <name>dataModel</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BindingMethod</type>
            <name>dataBinding</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataBinding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRunning</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setRunning</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>initialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialValues</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>(const QVariantMap &amp;initialValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>stateNames</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>stateNames</anchor>
            <arglist>(bool compress) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>activeStateNames</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>activeStateNames</anchor>
            <arglist>(bool compress) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>(const QString &amp;scxmlStateName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connectToState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>connectToState</anchor>
            <arglist>(const QString &amp;scxmlStateName, const QObject *receiver, const char *method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScxmlEventFilter *</type>
            <name>scxmlEventFilter</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>scxmlEventFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScxmlEventFilter</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>setScxmlEventFilter</anchor>
            <arglist>(QScxmlEventFilter *newFilter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent</anchor>
            <arglist>(QScxmlEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-1</anchor>
            <arglist>(const QString &amp;eventName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>submitEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>submitEvent-2</anchor>
            <arglist>(const QString &amp;eventName, const QVariant &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelDelayedEvent</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>cancelDelayedEvent</anchor>
            <arglist>(const QString &amp;sendId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDispatchableTarget</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>isDispatchableTarget</anchor>
            <arglist>(const QString &amp;target) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runningChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>runningChanged</anchor>
            <arglist>(bool running)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>log</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>log</anchor>
            <arglist>(const QString &amp;label, const QString &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reachedStableState</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>reachedStableState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eventOccurred</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>eventOccurred</anchor>
            <arglist>(const QScxmlEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataModelChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>dataModel-prop</anchor>
            <arglist>(QScxmlDataModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initialValuesChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialValues-prop</anchor>
            <arglist>(const QVariantMap &amp;initialValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializedChanged</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>initialized-prop</anchor>
            <arglist>(bool initialized)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>externalEventOccurred</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>externalEventOccurred</anchor>
            <arglist>(const QScxmlEvent &amp;event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>init</name>
            <anchorfile>qscxmlstatemachine.html</anchorfile>
            <anchor>init</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>mediaplayer-qml-dynamic</name>
        <filename>qml-mediaplayer-qml-dynamic.html</filename>
    </compound>
    <compound kind="class">
        <name>Scxml.StateMachineLoader</name>
        <filename>qml-scxml-statemachineloader.html</filename>
    </compound>
</tagfile>
